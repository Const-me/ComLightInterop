<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
	<metadata minClientVersion="3.4.4">
		<id>ComLightInterop</id>
		<version>1.3.1</version>
		<authors>const.me</authors>
		<owners>const.me</owners>
		<summary>Lightweight cross-platform COM interop library for Windows and Linux. Allows to expose C++ objects to .NET, and .NET objects to C++.</summary>
		<description>
			The library only supports IUnknown-based interfaces, it doesn’t handle IDispatch.
			You can only use simple types in your interfaces: primitives, structures, strings, pointers, function pointers, but not VARIANT or SAFEARRAY.
			This package targets 3 platforms, .NET framework 4.7.2, .NET Core 2.2, and VC++.
			Unfortunately, VC++ is Windows only.
			To build Linux shared libraries implementing or consuming COM objects, please add "build/native" directory from this package to C++ include paths.
			For cmake see include_directories command, or use some other method, depending on your C++ build system, and compiler.
			Keep in mind .NET assemblies are often “AnyCPU”, C++ libraries are not, please make sure you’re building your native code for the correct architecture.
		</description>
		<copyright>Copyright © const.me, 2019-2020</copyright>
		<title>Lightweight cross-platform COM interop</title>
		<releaseNotes>
			COM methods can now return native pointers, `IntPtr` type in .NET, any raw pointer type in C++.
			Deterministic release of .NET objects exposed to C++, implement `iComDisposable` interface to get notified.
			Deterministic release of C++ objects exposed to .NET, inherit your interfaces from `IDisposable` to be able to do so.
			Marshalling arrays of COM objects.
			Interfaces support multiple methods with the same name.
			Interfaces can inherit from other interfaces; you must override all the base interface methods with `new` keyword.
			Limited support for `retval` arguments. So far, it’s only supported for native to managed marshalling direction.
			Interfaces can be marked for one-way marshalling direction, when you do so it improves their marshalling performance.
			Fixed a few bugs.
		</releaseNotes>
		<projectUrl>https://github.com/Const-me/ComLightInterop</projectUrl>
		<repository type="git" url="https://github.com/Const-me/ComLightInterop.git" />
		<license type="expression">MIT</license>
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<dependencies>
			<group targetFramework=".NETCoreApp2.2" />
			<group targetFramework="net472">
				<dependency id="System.Buffers" version="4.5.0" />
				<dependency id="System.Memory" version="4.5.3" />
			</group>
			<group targetFramework="native" />
		</dependencies>
		<references>
			<reference file="ComLight.dll" />
		</references>
		<tags>native, ComLightInterop, COM</tags>
	</metadata>
	<files>
		<!-- .NET Core -->
		<file src="bin\Release\netcoreapp2.2\ComLight.dll" target="lib\netcoreapp2.2" />
		<file src="bin\Release\netcoreapp2.2\ComLight.pdb" target="lib\netcoreapp2.2" />
		<file src="bin\Release\netcoreapp2.2\ComLight.xml" target="lib\netcoreapp2.2" />

		<!-- .NET Framework -->
		<file src="..\ComLightDesktop\bin\Release\ComLight.dll" target="lib\net472" />
		<file src="..\ComLightDesktop\bin\Release\ComLight.pdb" target="lib\net472" />
		<file src="..\ComLightDesktop\bin\Release\ComLight.xml" target="lib\net472" />
		
		<!-- Native code -->
		<file src="..\ComLightLib\**.h" target="build\native" />
		<file src="..\ComLightLib\**.hpp" target="build\native" />
		<file src="..\ComLightLib\**.cpp" target="build\native" />
		<file src="ComLightInterop.targets" target="build" />
	</files>
</package>